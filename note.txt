Problems to transfer to microservice architecture

1.
将 GlobalExceptionHandler 移动到另一个模块后，它无法再捕获 JWT 中的异常了。
主要原因是 @ControllerAdvice 默认只作用于其所在模块的 Controller 范围。
如果跨模块，需要做一些额外的配置，但更通用的解决方法就是你提到的——写一个 CustomHandlerExceptionResolver。

HandlerExceptionResolver 是一个更底层的异常处理机制，它不依赖于 Spring MVC 的 @ControllerAdvice 范围限制。
通过实现 HandlerExceptionResolver，你可以在全局范围捕获所有异常（包括从 JWT 验证抛出的异常）。

同时我的前端默认后端返回非 200 的 HTTP 状态码（如 401、500），前端的 axios 会直接进入 catch 分支，而不是 then，从而可能引发前端逻辑问题。
所以如果我希望所有后端响应都能进入 then，可以将状态码统一设置为 200，并通过自定义的 code 和 msg 字段传递实际的错误信息。

Spring 的异常处理机制是有层级顺序的，简单来说：
@ExceptionHandler（方法级别）：优先捕获特定 Controller 中的方法抛出的异常。
@ControllerAdvice（全局级别，例如 GlobalExceptionHandler）：用于捕获应用全局范围的异常。
HandlerExceptionResolver（如 CustomHandlerExceptionResolver）：这是更底层的异常处理机制，优先级最低，当 @ExceptionHandler 和 @ControllerAdvice 都无法处理时，Spring 会调用 HandlerExceptionResolver。
所以controller里的异常优先被 GlobalExceptionHandler 捕获，如果 GlobalExceptionHandler 中没有匹配的 @ExceptionHandler，才会被 CustomHandlerExceptionResolver 捕获。


2.
分离数据库的时候需要小心原来的comment service逻辑里的连表查询，需要改成里用openfeignClient进行查询




